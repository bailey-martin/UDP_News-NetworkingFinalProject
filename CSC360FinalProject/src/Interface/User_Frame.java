/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author baileymartin
 */
public class User_Frame extends javax.swing.JFrame {

     private boolean run = true;
    private ArrayList<String> ip_addresses = new ArrayList(); //stores IP addresses of peers
    private ArrayList<Boolean> can_be_used = new ArrayList(); //true if matching location IP can be sent to; false if already sent to

    /**
     * Creates new form User_Frame
     */
    public User_Frame()throws UnknownHostException { //beginning of constructor
        initComponents();
        newsFeedField.setEditable(false);
         
        //String ip = ""; //initialize string to contain nothing
        try (final DatagramSocket socket = new DatagramSocket()) {
            //gets host IP address and stores as type InetAddress
            InetAddress ip = InetAddress.getLocalHost();
            //Converts from IPAddress to String
            String tempIP = ip.toString();
            //subString that takes the local host name and / out of the IP address
            tempIP = tempIP.substring(tempIP.lastIndexOf("/") + 1);
            //add ip to arrayList, add boolean true to arrayList
            ip_addresses.add(tempIP);
            can_be_used.add(true);
            System.out.println("IP's have been added to the arrayLists.");
            System.out.println("Your IP address is: " + tempIP);
        } catch (SocketException ex) {
            System.out.println("ERROR IN IP PULL HAS OCCURED.");
        }
    } //end of constructor
    
    
    public String myClientIPAddress = "";
    
    
    public void setMyIP(String ipaddr){
        myClientIPAddress = ipaddr;
    }
    
    public String getMyIP(){
        return myClientIPAddress;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        messageFieldLabel = new javax.swing.JLabel();
        chatFeedLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        newNewsMessageField = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        newsFeedField = new javax.swing.JTextArea();
        postNewsButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        messageFieldLabel.setText("Enter your desired news message to share:");

        chatFeedLabel.setText("P2P News Chat Feed");

        newNewsMessageField.setColumns(20);
        newNewsMessageField.setRows(5);
        jScrollPane1.setViewportView(newNewsMessageField);

        newsFeedField.setColumns(20);
        newsFeedField.setRows(5);
        jScrollPane2.setViewportView(newsFeedField);

        postNewsButton.setText("Post my News!");
        postNewsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postNewsButtonActionPerformed(evt);
            }
        });

        exitButton.setText("EXIT");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(messageFieldLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chatFeedLabel)
                .addGap(124, 124, 124))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(exitButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(125, 125, 125)
                                .addComponent(postNewsButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(exitButton)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(messageFieldLabel)
                    .addComponent(chatFeedLabel))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(postNewsButton)))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void postNewsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postNewsButtonActionPerformed
        // TODO add your handling code here:
        String newNewsMessage = newNewsMessageField.getText();
        newsFeedField.append(newNewsMessage + "\n");
        newNewsMessageField.setText("");
        
        //Somehow pass the new message to all peers in network
    }//GEN-LAST:event_postNewsButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws UnknownHostException, IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(User_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(User_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(User_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(User_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new User_Frame().setVisible(true);
                } catch (UnknownHostException ex) {
                    Logger.getLogger(User_Frame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
        SocketTest s1 = new SocketTest();//designed to pull client IP
        startServer();
        startSender();
    }
public static void startSender() throws UnknownHostException { //beginning of startSender()
//        InetAddress aHost = InetAddress.getLocalHost();
         InetAddress aHost = InetAddress.getByName("192.168.223.203");
         InetAddress bHost = InetAddress.getByName("192.168.210.84");
         InetAddress cHost = InetAddress.getByName("192.168.215.41");
        (new Thread() {
            @Override
            public void run() {
                System.out.println("Please enter the news item that you wish to share:\n");
                
                Scanner scan = new Scanner(System.in);
                String str = scan.nextLine();
                byte data[] = str.getBytes();
                    DatagramSocket socket = null;
                try {
                    socket = new DatagramSocket();
                   // socket.setBroadcast(true);
                } catch (SocketException ex) {
                    ex.printStackTrace();
                }//end of catch

                DatagramPacket packet = new DatagramPacket(data, data.length, aHost, 55555);
                DatagramPacket packet2 = new DatagramPacket(data, data.length, bHost, 55555);
                DatagramPacket packet3 = new DatagramPacket(data, data.length, cHost, 55555);
                data = null;
                System.out.println ("THIS IS A TEST OF DATA PRINT" + data);
                int i = 0;
                while (i < 3) { //begin of while
                    try { //begin of try()
                        System.out.println("Sending news item: " + new String(packet.getData()));
                        socket.send(packet);
                        socket.send(packet2);
                        socket.send(packet3);
                        Thread.sleep(50);
                        i++;
                        //Now we need to send to other peers who have not yet gotten this message yet. So..let's pull from the arrayList!
                        //SocketTest dummy = new SocketTest();
                        //dummy.P2PWork();
                        System.out.println("Sending Attempt Number of News Item: " + i);
                    }//end of try
                    catch (IOException ex) {
                        ex.printStackTrace();
                    }//end of catch
                    catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }//end of catch
                }//end of while-loop
            }//end of run()
        }).start(); //end of thread
    } //end of startSender()
public static void startServer() { //beginning of startServer()
        (new Thread() {
            @Override
            public void run() {
                DatagramSocket socket = null;
                try {
                    socket = new DatagramSocket(55555); //listens on port 55555
                } catch (SocketException ex) {
                    ex.printStackTrace();
                }//end of catch
                DatagramPacket packet = new DatagramPacket(new byte[1024], 1024);//makes a new packet
                //DatagramPacket packet2 = new DatagramPacket(new byte[1024], 1024);
                String temp;
                while (true) {
                    try {
                        socket.receive(packet);
                        temp = new String(packet.getData());
                        System.out.println("News Item that was received by the server: " + temp);
                        //User_Frame userTemp = new User_Frame();
                       
                        //Now we need to send to other peers who have not yet gotten this message yet. So..let's pull from the arrayList!
                        //SocketTest dummy = new SocketTest();
                        //dummy.P2PWork();
                    }//end of try-statement 
                    catch (IOException ex) {
                        ex.printStackTrace();
                    }//end of catch
                }//end of while
            }//end of run
        }).start(); //end of thread
    }//end of start server
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel chatFeedLabel;
    private javax.swing.JButton exitButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel messageFieldLabel;
    private javax.swing.JTextArea newNewsMessageField;
    public javax.swing.JTextArea newsFeedField;
    private javax.swing.JButton postNewsButton;
    // End of variables declaration//GEN-END:variables
}
